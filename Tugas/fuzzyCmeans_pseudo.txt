IMPORT numpy as np

from sklearn.datasets IMPORT make_blobs



DEFINE FUNCTION fuzzy_c_means(X, c, m, error=0.001, max_iter=100):

    SET n TO X.shape[0] # Jumlah data

    SET p TO X.shape[1] # Jumlah fitur

    SET U TO np.random.rand(n, c) # Inisialisasi matriks keanggotaan U

    SET U TO U / np.sum(U, axis=1)[:, None] # Normalisasi matriks keanggotaan U

    SET centroids TO np.zeros((c, p)) # Inisialisasi pusat cluster

    FOR i IN range(max_iter):

        # Hitung pusat cluster

        FOR j IN range(c):

            SET centroids[j, :] TO np.sum((U[:, j]**m)[:, None] * X, axis=0) / np.sum(U[:, j]**m)

        # Hitung matriks keanggotaan U

        SET U_new TO np.zeros((n, c))

        FOR j IN range(c):

            FOR k IN range(n):

                SET num TO np.linalg.norm(X[k, :] - centroids[j, :])

                SET den TO np.sum([np.linalg.norm(X[k, :] - centroids[l, :]) FOR l IN range(c)])

                SET U_new[k, j] TO 1 / (1 + (num / den)**(2 / (m - 1)))

        # Hitung selisih antara matriks keanggotaan lama dan baru

        SET diff TO np.linalg.norm(U_new - U)

        # Jika selisih sudah kurang dari error, berhenti iterasi

        IF diff < error:

            break

        # Update matriks keanggotaan U

        SET U TO U_new

    # Kembalikan pusat cluster dan matriks keanggotaan U

    RETURN centroids, U



# Contoh penggunaan algoritma fuzzy c-means dengan data sintetis

SET X, y TO make_blobs(n_samples=1000, centers=3, n_features=2, random_state=42)

SET centroids, U TO fuzzy_c_means(X, c=3, m=2)



# Cetak hasil

OUTPUT("Pusat cluster:")

OUTPUT(centroids)

OUTPUT("Matriks keanggotaan:")

OUTPUT(U)
